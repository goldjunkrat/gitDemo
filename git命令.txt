配置:
	name
		git config --global user.name "zhangxinnan"
	email
		git config --global user.email "1016217659@qq.com"
使用git:
	git status
		查看当前仓库的状态
	git init
		初始化仓库
	git add 文件名
		将文件从未跟踪切换到暂存状态
	git add *
		将所有已修改(未跟踪)的文件暂存
	git commit -m "提交信息"
		将暂存的文件存储到仓库中,使文件从暂存切换到未修改状态
	git commit -a
		将所有已修改的文件直接提交到代码仓库中,省去add的流程(未跟踪的文件不会提交)
常用的命令:
	git restore 文件名/*
		将指定文件恢复到上次commit的状态
	git restore --staged 文件名
		将指定文件从暂存状态取消
	git rm 文件名
		删除指定文件
	git rm 文件名 -f
		强制删除指定文件
	git mv 旧文件名 新文件名 from to
		移动文件 重命名文件
分支:
	git branch
		查看当前分支
	git branch 分支名
		创建一个新的分支
	git branch 分支名 -d
		删除一个分支
	git switch 分支名
		切换到目标分支
	git switch -c 分支名
		创建并切换到该分支
	git merge 分支名
		将指定分支快速合并到当前分支上(只适用于指定分支和当前分支的状态仍处于一条线上)
变基:
	由于merge合并分支时产生的分支创建分支合并都会显示在提交记录中,因此当项目复杂时,代码的提交记录就会变得极为混乱
	原理(变基时发生了什么):
		1.当我们发起变基时,git会首先找到两条分支的最近的共同祖先
		2.对比当前分支相对于祖先的历史提交,并且将它们提取出来存储在一个临时文件中
		3.将分支指向master所在的状态
		4.将存储在临时文件中的分支指向master
		5.再将分支的指针指向最新的状态
	变基和merge对于合并分支来说最终结果是一样的.但是变基会使代码的提交记录更整洁更清晰.大部分情况下合并和变基是可以互换的,但是如果分支已经提交给了远程仓库,那么这时尽量不要变基
远程仓库:
	git remote add <远程库名字(相当于远程库在本地的名字)> <远程库地址>
	git branch -M main
		修改分支的名字为main
	git push -u <远程库的名字> <本地分支的名字>
		将代码上传到服务器上
远程库的操作的命令:
	git remote
		列出当前关联的远程库
	git remote add <远程库名> <url> 
		关联远程库
	git remote remove <远程库名>
		删除远程库
	git push -u <远程库名> <分支名>
		向远程库推送代码,并和当前分支关联
	
	如果本地库的版本低于远程库,push默认是推不上去的
	要想推送成功,必须先确保本地库和远程库的版本一致
	git fetch
		fetch会从远程仓库下载所有代码,但是它不会将代码和当前分支自动合并
		使用fetch拉取代码后,必须手动对代码进行合并
	git pull
		从服务器上拉取代码并自动合并
